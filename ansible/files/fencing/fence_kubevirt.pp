# == Define: pacemaker::stonith::fence_kubevirt
#
# Module for managing Stonith for fence_kubevirt.
#
# WARNING: Generated by "rake generate_stonith", manual changes will
# be lost.
# JUST KIDDING! - AJB
# But we should probably generate the real thing using rake
#
# === Parameters
#
# Left blank while this is just a workaround
#
# === Dependencies
#  None
#
# === Authors
#
# Generated by rake generate_stonith task.
# JUST KIDDING! - AJB
#
# === Copyright
#
# Copyright (C) 2021 Red Hat Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
define pacemaker::stonith::fence_kubevirt (
  $action = undef,
  $plug = undef,
  $ssl_insecure = undef,
  $namespace = undef,
  $kubeconfig = undef,
  $verbose = undef,
  $verbose_level = undef,
  $debug_file = undef,
  $delay = undef,
  $separator = undef,
  $power_timeout  = undef,
  $power_wait = undef,
  $shell_timeout  = undef,
  $login_timeout  = undef,
  $retry_on = undef,


  $meta_attr      = undef,
  $interval       = '60s',
  $ensure         = present,
  $pcmk_host_list = undef,

  $tries          = undef,
  $try_sleep      = undef,

  $disable_timeout = undef,

  $deep_compare       = false,
  $update_settle_secs = 600,
) {
  $action_chunk = $action ? {
    undef   => '',
    default => "pcmk_reboot_action=\"${action}\"",
  }
  $plug_chunk = $plug ? {
    undef   => '',
    default => "plug=\"${plug}\"",
  }
  $ssl_insecure_chunk = $ssl_insecure ? {
    undef   => '',
    default => "ssl_insecure=\"${ssl_insecure}\"",
  }
  $namespace_chunk = $namespace ? {
    undef   => '',
    default => "namespace=\"${namespace}\"",
  }
  $kubeconfig_chunk = $kubeconfig ? {
    undef   => '',
    default => "kubeconfig=\"${kubeconfig}\"",
  }
  $verbose_chunk = $verbose ? {
    undef   => '',
    default => "verbose=\"${verbose}\"",
  }
  $verbose_level_chunk = $verbose_level ? {
    undef   => '',
    default => "verbose_level=\"${verbose_level}\"",
  }
  $debug_file_chunk = $debug_file ? {
    undef   => '',
    default => "debug_file=\"${debug_file}\"",
  }
  $delay_chunk = $delay ? {
    undef   => '',
    default => "delay=\"${delay}\"",
  }
  $separator_chunk = $separator ? {
    undef   => '',
    default => "separator=\"${separator}\"",
  }
  $disable_timeout_chunk = $disable_timeout ? {
    undef   => '',
    default => "disable_timeout=\"${disable_timeout}\"",
  }
  $power_timeout_chunk = $power_timeout ? {
    undef   => '',
    default => "power_timeout=\"${power_timeout}\"",
  }
  $shell_timeout_chunk = $shell_timeout ? {
    undef   => '',
    default => "shell_timeout=\"${shell_timeout}\"",
  }
  $login_timeout_chunk = $login_timeout ? {
    undef   => '',
    default => "login_timeout=\"${login_timeout}\"",
  }
  $power_wait_chunk = $power_wait ? {
    undef   => '',
    default => "power_wait=\"${power_wait}\"",
  }
  $retry_on_chunk = $retry_on ? {
    undef   => '',
    default => "retry_on=\"${retry_on}\"",
  }

  $pcmk_host_value_chunk = $pcmk_host_list ? {
    undef   => '$(/usr/sbin/crm_node -n)',
    default => $pcmk_host_list,
  }

  $meta_attr_value_chunk = $meta_attr ? {
    undef   => '',
    default => "meta ${meta_attr}",
  }

  # $title can be a mac address, remove the colons for pcmk resource name
  $safe_title = regsubst($title, ':', '', 'G')

  Exec<| title == 'wait-for-settle' |> -> Pcmk_stonith<||>

  $param_string = "${action_chunk} ${plug_chunk} ${ssl_insecure_chunk} ${namespace_chunk} ${kubeconfig_chunk} ${verbose_chunk} ${verbose_level_chunk} ${debug_file_chunk} ${delay_chunk} ${separator_chunk} ${disable_timeout_chunk} ${power_timeout_chunk} ${shell_timeout_chunk} ${login_timeout_chunk} ${power_wait_chunk} ${retry_on_chunk}  op monitor interval=${interval} ${meta_attr_value_chunk}"

  # This needs to be in the final version
  #
  # if $ensure != 'absent' {
  #   ensure_resource('package', 'fence-agents-kubevirt', { ensure => 'installed' })
  #   Package['fence-agents-kubevirt'] -> Pcmk_stonith["stonith-fence_kubevirt-${safe_title}"]
  # }
  pcmk_stonith { "stonith-fence_kubevirt-${safe_title}":
    ensure             => $ensure,
    stonith_type       => 'fence_kubevirt',
    pcmk_host_list     => $pcmk_host_value_chunk,
    pcs_param_string   => $param_string,
    tries              => $tries,
    try_sleep          => $try_sleep,
    deep_compare       => $deep_compare,
    update_settle_secs => $update_settle_secs,
  }
}
