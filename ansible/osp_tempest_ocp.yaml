---
- hosts: convergence_base
  become: true
  become_user: ocp

  tasks:
  - name: Include variables
    include_vars: vars/default.yaml

  - name: setup tempest
    when: tempest_enabled|bool
    block:
    - name: create working os_tempest dir
      file:
        path: "{{ base_path }}/{{ item }}"
        state: directory
        mode: '0755'
      with_items:
      - container_tempest_cfg
      - container_tempest_bin

    - name: add tempest_script.sh
      template:
        src: tempest/tempest_script.sh.j2
        dest: "{{ base_path }}/container_tempest_bin/tempest_script.sh"
        mode: '0755'

    - name: add tempest-deployer-input.conf from template
      template:
        src: tempest/tempest-deployer-input.conf.j2
        dest: "{{ base_path }}/container_tempest_cfg/tempest-deployer-input.conf"
        mode: '0755'

    - name: Create tempest white file
      template:
        src: tempest/whitelist_file.j2
        dest: "{{ base_path }}/container_tempest_cfg/whitelist_file"
        mode: 0644
      when: tempest_whitelist|length > 0

    - name: create tempest-pod.yaml from template
      vars:
        os_password: "{{ os_password_ret.stdout }}"
      template:
        src:  "tempest-pod.yaml.j2"
        dest: "{{ base_path }}/tempest-pod.yaml"
        mode: 0644

    - name: create tempest-config ConfigMap
      become_user: ocp
      shell: |
        if oc get configmap tempest-config; then
          oc delete configmap tempest-config
        fi
        oc create configmap tempest-config --from-file {{ base_path }}/container_tempest_cfg
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
        KUBECONFIG: "{{base_path}}/dev-scripts/ocp/{{ ocp_cluster_name }}/auth/kubeconfig"

    - name: create tempest-bin ConfigMap
      become_user: ocp
      shell: |
        if oc get configmap tempest-bin; then
          oc delete configmap tempest-bin
        fi
        oc create configmap tempest-bin --from-file {{ base_path }}/container_tempest_bin
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
        KUBECONFIG: "{{base_path}}/dev-scripts/ocp/{{ ocp_cluster_name }}/auth/kubeconfig"

    - name: create tempest pod
      become_user: ocp
      shell: |
        if oc get pod/tempest; then
          oc delete pod tempest
        fi
        oc apply -f {{ base_path }}/tempest-pod.yaml
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
        KUBECONFIG: "{{base_path}}/dev-scripts/ocp/{{ ocp_cluster_name }}/auth/kubeconfig"

    - name: wait for tempest pod in ready state
      become_user: ocp
      shell: |
        oc wait pod tempest --for condition=Ready --timeout="{{ tempest_timeout }}s"
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
        KUBECONFIG: "{{base_path}}/dev-scripts/ocp/{{ ocp_cluster_name }}/auth/kubeconfig"
      register: tempest_run
      ignore_errors: true

    - name: get tempest result from ocp logs
      become_user: ocp
      shell: |
        oc logs tempest -c tempest-run
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
        KUBECONFIG: "{{base_path}}/dev-scripts/ocp/{{ ocp_cluster_name }}/auth/kubeconfig"
      register: tempest_result

    - name:
      debug:
        msg: "{{ tempest_result.stdout.split('\n') }}"

    - name: Fail playbook if tempest run failed or timed out
      fail:
        msg: Tempest run failed or timed out, check output!
      when: tempest_run.rc == 1
