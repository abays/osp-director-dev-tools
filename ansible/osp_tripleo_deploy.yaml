---
- hosts: localhost
  vars_files: vars/default.yaml
  roles:
  - oc_local

  tasks:
  - set_fact:
      ooo_yaml_dir: "{{ working_yamls_dir }}/tripleo_deploy"
      ooo_script_dir: "{{ working_yamls_dir }}/tripleo_deploy_bin"

#  - name: allow traffic between ostestbm and ctlplane for tripleo_deploy container
#    iptables:
#      chain: FORWARD
#      source: 192.168.111.0/24
#      destination: 192.168.25.0/24
#      jump: ACCEPT
#      action: insert
#      rule_num: 1

  - name: Create yaml dir
    file:
      path: "{{ item }}"
      state: directory
    with_items:
    - "{{ ooo_yaml_dir }}"
    - "{{ ooo_script_dir }}"

  - name: render templates to yaml dir
    template:
      src: "osp/tripleo_deploy/{{ item }}.j2"
      dest: "{{ ooo_yaml_dir }}/{{ item }}"
    vars:
      - nfs_server: '192.168.25.1'
    with_items:
    - custom.yaml
    - glance-backend-nfs.yaml
    - containers-prepare-parameter.yaml

  - name: copy ooo files to yaml dir
    copy:
      src: "{{ item }}"
      dest: "{{ ooo_yaml_dir }}/"
    with_fileglob:
    - "osp/tripleo_deploy/*.yaml"

  - name: copy tripleo-deploy.sh to ooo_script_dir
    copy:
      src: osp/tripleo-deploy.sh
      dest: "{{ ooo_script_dir }}/tripleo-deploy.sh"

#  - name: render {{ base_path }}/tripleo-deploy-job.yaml
#    template:
#      src: tripleo-deploy-job.yaml.j2
#      dest: "{{ base_path }}/tripleo-deploy-job.yaml"
#      owner: ocp
#    tags:
#      - tripleo_deploy_setup

  - name: create tripleo-deploy-config ConfigMap
    become_user: ocp
    shell: |
      if oc get cm -n openstack tripleo-deploy-config; then
        oc delete cm -n openstack tripleo-deploy-config
      fi
      oc create cm -n openstack tripleo-deploy-config --from-file={{ ooo_yaml_dir }}/ 
    environment: &oc_env
      PATH: "{{ oc_env_path }}"
      KUBECONFIG: "{{ kubeconfig }}"

  - name: create tripleo-deploy.sh ConfigMap
    shell: |
      if oc get cm -n openstack tripleo-deploy-sh; then
        oc delete cm -n openstack tripleo-deploy-sh
      fi
      oc create cm -n openstack tripleo-deploy-sh --from-file {{ ooo_script_dir }}/tripleo-deploy.sh
    environment:
      <<: *oc_env

  - name: Create glance NFS share
    file:
      path: "/home/nfs/{{ item }}"
      state: directory
      mode: '777'
      group: nobody
      owner: nobody
    with_items:
      - glance
      - glance-staging

  - name: Configure glance export
    lineinfile:
      path: /etc/exports
      line: "/home/nfs/{{ item }} *(rw,sync,no_root_squash)"
    with_items:
      - glance
      - glance-staging

  - name: Export NFS share to the server
    command: "exportfs -r"


#  - name: start tripleo deploy job
#    become_user: ocp
#    shell: |
#      if oc get job tripleo-deploy; then
#        oc delete job tripleo-deploy
#      fi
#      oc apply -f {{ base_path }}/tripleo-deploy-job.yaml
#    environment:
#      <<: *oc_env

#  - name: wait up to 100m for tripleo deploy job
#    become_user: ocp
#    shell: |
#      oc get job tripleo-deploy -o json | jq .status.active
#    register: status
#    environment:
#      <<: *oc_env
#    until: (status.stdout == 0 or status.stdout == "null")
#    retries: 600
#    delay: 10

#  - name: check result of tripleo deploy job
#    become_user: ocp
#    shell: |
#      oc get job tripleo-deploy -o json | jq .status.succeeded
#    register: result
#    failed_when: result.stdout != "1"
#    environment:
#      <<: *oc_env

#  - name: get global_vars.yaml/etc from tripleo-deploy pod for input for operator deployment
#    shell: |
#      oc debug node/{{ tripleo_deploy_job_worker }} << EOF > {{ playbook_dir }}/vars/osp_{{ item | basename | lower }}
#      cat /host/tmp/cnv-ansible/{{ item }}
#      EOF
#    with_items:
#      - inventory.yaml
#      - global_vars.yaml
#      - Controller/global_config_settings.yaml
#      - group_vars/Controller
#    environment:
#      <<: *oc_env

#  - name: get clouds.yaml from tripleo-deploy.pod for input for openstackclient pod
#    shell: |
#      oc debug node/{{ tripleo_deploy_job_worker }} << EOF > /tmp/clouds.yaml
#      cat /host/tmp/clouds.yaml
#      EOF
#    environment:
#      <<: *oc_env

# create secret with clouds.yaml and use it in openstack-client pod
