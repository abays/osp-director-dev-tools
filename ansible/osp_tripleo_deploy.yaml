---
- hosts: localhost
  vars_files: vars/default.yaml
  roles:
  - oc_local

  tasks:
  - name: Set directory for the tripleo deployment files
    set_fact:
      ooo_yaml_dir: "{{ working_yamls_dir }}/tripleo_heat_envs"
      ooo_tarball_dir: "{{ working_yamls_dir }}/tripleo_deploy_tarball"

  - name: Make sure to cleanup previous yaml dirs
    file:
      path: "{{ item }}"
      state: absent
    with_items:
    - "{{ ooo_yaml_dir }}"
    - "{{ ooo_tarball_dir }}"

  - name: Create yaml dir
    file:
      path: "{{ item }}"
      state: directory
      mode: '0755'
    with_items:
    - "{{ ooo_yaml_dir }}"
    - "{{ ooo_tarball_dir }}"

  # FIXME: Hack for fencing data generation -- needs CNV VM info
  - name: Fencing data generation
    block:
    - name: Wait until all controller VMs are present
      shell: |
        oc get vm -n openstack -o name | wc -l
      register: ctrl_vm_count
      environment: &oc_env
        PATH: "{{ oc_env_path }}"
        KUBECONFIG: "{{ kubeconfig }}"
      retries: 50
      delay: 5
      until: ctrl_vm_count.stdout|int == osp.controller.count|int

    - name: Get controller VM names
      shell: |
        oc get vm -n openstack -o custom-columns=NAME:.metadata.name --no-headers
      register: ctrl_vm_names
      environment:
        <<: *oc_env

    - name: Get controller VMI control plane MACs
      shell: |
        oc get vmi -n openstack -o jsonpath='{range .items[*].status.interfaces[?(.name=="ctlplane")]}{.mac}{"\n"}{end}'
      environment:
        <<: *oc_env
      register: ctrl_vm_macs
      retries: 50
      delay: 5
      until: ctrl_vm_macs.stdout_lines|length == osp.controller.count|int
    when: osp.controller.count == 3

  - name: render common templates to yaml dir
    template:
      src: "{{ item }}"
      dest: "{{ ooo_yaml_dir }}/{{ item | basename | splitext | first }}"
      mode: '0644'
    with_fileglob:
    - "templates/osp/tripleo_heat_envs/common/*.j2"

  - name: render templates to yaml dir
    template:
      src: "{{ item }}"
      dest: "{{ ooo_yaml_dir }}/{{ item | basename | splitext | first }}"
      mode: '0644'
    with_fileglob:
    - "templates/osp/tripleo_heat_envs/{{ osp.release }}/*.j2"

  - name: create heat-env-config ConfigMap
    shell: |
      oc create configmap -n openstack heat-env-config --from-file={{ ooo_yaml_dir }}/ --dry-run -o yaml | oc apply -f -
    environment:
      <<: *oc_env

  - name: copy {{ osp.release }} custom tripleo tarball files
    copy:
      src: "{{ item }}"
      dest: "{{ ooo_tarball_dir }}/"
      mode: '0644'
    with_fileglob:
    - osp/{{ osp.release }}/*

  # (mschuppert) todo make feature enablement more generic by provide a list of features in the vars file
  - name: copy computeHCI roles file to custom tripleo environment files
    copy:
      src: "{{ item }}"
      dest: "{{ ooo_tarball_dir }}/{{ item | basename | splitext | first }}"
      mode: '0644'
    with_fileglob:
    - "files/osp/features/{{ osp.release }}/hci/*.yaml"
    when: osp.compute.hci | bool

  - name: create tripleo-tarball-config ConfigMap with tarballs
    shell: |
      cd {{ ooo_tarball_dir }}
      tar -cvzf tarball-config.tar.gz *
      oc create configmap -n openstack tripleo-tarball-config --from-file=tarball-config.tar.gz --dry-run -o yaml | oc apply -f -
      rm tarball-config.tar.gz
    environment:
      <<: *oc_env

  - name: Create glance NFS share
    become: true
    become_user: root
    file:
      path: "/home/nfs/{{ item }}"
      state: directory
      mode: '0777'
      group: nobody
      owner: nobody
    with_items:
      - glance
      - glance-staging

  - name: Configure glance export
    become: true
    become_user: root
    lineinfile:
      path: /etc/exports.d/glance.exports
      line: "/home/nfs/{{ item }} *(rw,sync,no_root_squash)"
      create: yes
      mode: '0644'
    with_items:
      - glance
      - glance-staging

  - name: Export NFS share to the server
    become: true
    become_user: root
    command: "exportfs -r"
