---
- name: OpenShift Scale Down Worker
  hosts: localhost
  vars_files: vars/default.yaml
  roles:
    - oc_local

  tasks:
    - name: Set combined osp dict
      ansible.builtin.set_fact:
        osp: "{{ osp_defaults | combine((osp_release_defaults | default({})), recursive=True) | combine((osp_local | default({})), recursive=True) }}"

    - name: Set deletePolicy=Newest on existing worker machineset for predictable scale down
      ansible.builtin.shell: |
        oc get -n openshift-machine-api machineset -l machine.openshift.io/cluster-api-machine-type=worker -o json | \
          jq '.spec.deletePolicy="Newest"' | oc apply -f -
      environment: &oc_env
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
        KUBECONFIG: "{{ base_path }}/dev-scripts/ocp/{{ ocp_cluster_name }}/auth/kubeconfig"

    - name: Get number of ready OCP baremetal nodes
      ansible.builtin.shell: |
        echo $(oc get -n openshift-machine-api baremetalhost | grep worker |grep ready | wc -l)
      environment:
        <<: *oc_env
      register: worker_ocp_ready

    - name: Scale down OCP workers if there are not enough ready baremetal nodes
      when:
        - osp.compute.count > 0
        - worker_ocp_ready.stdout | int != osp.compute.count | int
      block:
        - name: Get current {{ ocp_cluster_name }}-worker-0 replicas
          ansible.builtin.shell:
            oc -n openshift-machine-api get machineset -l machine.openshift.io/cluster-api-machine-type=worker -o json | jq -r .items[0].status.replicas
          environment:
            <<: *oc_env
          register: worker_replicas

        - name: Set fact of new replicas count
          ansible.builtin.set_fact:
            replicas: "{{ worker_replicas.stdout | int - osp.compute.count | int }}"

        - name: Scale down worker machineset by {{ replicas }}
          ansible.builtin.shell: |
            oc -n openshift-machine-api scale machineset -l machine.openshift.io/cluster-api-machine-type=worker --replicas={{ replicas }}
          environment:
            <<: *oc_env

        - name: Wait until worker got deprovisioned
          ansible.builtin.shell: |
            echo $(oc get -n openshift-machine-api baremetalhost | grep worker |grep ready | wc -l)
          environment:
            <<: *oc_env
          register: worker_ocp_ready
          until: worker_ocp_ready.stdout | int == osp.compute.count | int
          delay: 30
          retries: 60
